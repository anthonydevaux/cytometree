main = paste0(cnames[j]),
xlab = paste("N = ", length(data[,j]),", normAIC = ",
round(AicDiff1,2), sep =" "),ylab = "Density")
#           abline(v =  abl)
colo <- rep(2, length(leavesSort))
colo[leavesSort%in%tempclass_neg.2] <-4
plot(temp, rep(1,n), yaxt="n", ylab="", xlab="",main="classes",
col = colo,pch=16)
#           abline(v =  abl)
pos <- rep(1, n)
pos[!1:n%%2] <- 3
text(temp, rep(1,n), labels = leavesSort, cex = 0.45, pos=pos)
}
}
else if(Win == 3)
{
out[tind1.3, j] <- 0
out[tind2.3, j] <- 1
out[tind3.3, j] <- 2
if(plot)
{
curve(GaussMix3(x, mu1.3, mu2.3, mu3.3,
sqrt(Var1.3), sqrt(Var2.3), sqrt(Var3.3),
p1.3, p2.3, p3.3),
ylim=c(0,max(density(data[,j])$y)),
xlim=c(min(density(data[,j])$x),max(density(data[,j])$x)),
main = paste0(cnames[j]),
xlab = paste("N = ", length(data[,j]),", normAIC = ",
round(AicDiff2,2), sep =" "),ylab = "Density",
col = "blue", lwd=2)
lines(density(data[,j]), col='red', lwd = 2)
colo <- rep(4, length(leavesSort))
colo[leavesSort%in%gr1] <-2
colo[leavesSort%in%gr2] <-3
plot(temp, rep(1,n), yaxt="n", ylab="", xlab="",main="classes",
col = colo,pch=16)
pos <- rep(1, n)
pos[!1:n%%2] <- 3
text(temp, rep(1,n), labels = leavesSort, cex = 0.45, pos=pos)
}
}
}
}
colnames(out) <- cnames
return(out)
}
AnalyseBTTF2 <- BTTF2(LivingCells, Log=TRUE, minleaf = 50, ct = 0.1,
subpartind = CD3CD4amongLive, Knodes = 2)
KmeansOPT <- function(groups, Sortedcenters, K)
{
KK <- length(groups)
centers <- Sortedcenters
distKK <- rep(NA, KK)
if(K == 2)
{
for(kk in 1:KK)
{
group <- groups[[kk]]
g1 <- which(group == 1)
g2 <- which(group == 2)
mu1 <- mean(centers[g1])
mu2 <- mean(centers[g2])
d1 <- (centers[g1] - mu1)**2
d2 <- (centers[g2] - mu2)**2
distKK[kk] <- sum(d1, d2)
}
distKK[which(is.na(distKK))] <- 0
return(list("ind" = which.min(distKK), "val" = min(distKK[kk])))
}
else if (K == 3)
{
for(kk in 1:KK)
{
group <- groups[[kk]]
g1 <- which(group == 1)
g2 <- which(group == 2)
g3 <- which(group == 3)
mu1 <- mean(centers[g1])
mu2 <- mean(centers[g2])
mu3 <- mean(centers[g3])
d1 <- (centers[g1] - mu1)**2
d2 <- (centers[g2] - mu2)**2
d3 <- (centers[g3] - mu3)**2
distKK[kk] <- sum(d1, d2, d3)
}
distKK[which(is.na(distKK))] <- 0
return(list("ind" = which.min(distKK), "val" = min(distKK[kk])))
}
}
AnalyseBTTF2 <- BTTF2(LivingCells, Log=TRUE, minleaf = 50, ct = 0.1,
subpartind = CD3CD4amongLive, Knodes = 2)
Partition3gr <- function(N)
{
partitions <- list()
partition <- rep(NA, N)
loop1 <- 1:(N-2)
cpt <- 1
labelgr1 <- 1
labelgr2 <- 2
labelgr3 <- 3
for(i in loop1)
{
partition[1:i] <- labelgr1
loop2 <- (i+1):(N-1)
for(j in loop2)
{
partition[(i+1):j] <- labelgr2
partition[(j+1):N] <- labelgr3
partitions[[cpt]] <- partition
cpt <- cpt + 1
}
}
partitions
}
Partition2gr <- function(N)
{
Partitions <- list()
labelgr1 <- 1
labelgr2 <- 2
partition <- rep(labelgr2, N)
for(i in 1:(N-1))
{
temp <- partition
temp[1:i] <- labelgr1
Partitions[[i]] <- temp
}
Partitions
}
AnalyseBTTF2 <- BTTF2(LivingCells, Log=TRUE, minleaf = 50, ct = 0.1,
subpartind = CD3CD4amongLive, Knodes = 2)
Partition3gr <- function(N)
{
partitions <- list()
partition <- rep(NA, N)
loop1 <- 1:(N-2)
cpt <- 1
labelgr1 <- 1
labelgr2 <- 2
labelgr3 <- 3
for(i in loop1)
{
partition[1:i] <- labelgr1
loop2 <- (i+1):(N-1)
for(j in loop2)
{
partition[(i+1):j] <- labelgr2
partition[(j+1):N] <- labelgr3
partitions[[cpt]] <- partition
cpt <- cpt + 1
}
}
partitions
}
AnalyseBTTF2 <- BTTF2(LivingCells, Log=TRUE, minleaf = 50, ct = 0.1,
subpartind = CD3CD4amongLive, Knodes = 2)
library(Cytometree)
AnalyseBTTF2 <- BTTF2(LivingCells, Log=TRUE, minleaf = 50, ct = 0.1,
subpartind = CD3CD4amongLive, Knodes = 2)
Partition3gr <- function(N)
{
partitions <- list()
partition <- rep(NA, N)
loop1 <- 1:(N-2)
cpt <- 1
labelgr1 <- 1
labelgr2 <- 2
labelgr3 <- 3
for(i in loop1)
{
partition[1:i] <- labelgr1
loop2 <- (i+1):(N-1)
for(j in loop2)
{
partition[(i+1):j] <- labelgr2
partition[(j+1):N] <- labelgr3
partitions[[cpt]] <- partition
cpt <- cpt + 1
}
}
partitions
}
AnalyseBTTF2 <- BTTF2(LivingCells, Log=TRUE, minleaf = 50, ct = 0.1,
subpartind = CD3CD4amongLive, Knodes = 2)
sourceCpp("~/BTTF2/Cytometree/mvnpdfC.cpp")
sourceCpp("~/BTTF2/Cytometree/nmixpdfC.cpp")
source("~/BTTF2/Cytometree/Annot.r")
Partition3gr <- function(N)
{
partitions <- list()
partition <- rep(NA, N)
loop1 <- 1:(N-2)
cpt <- 1
labelgr1 <- 1
labelgr2 <- 2
labelgr3 <- 3
for(i in loop1)
{
partition[1:i] <- labelgr1
loop2 <- (i+1):(N-1)
for(j in loop2)
{
partition[(i+1):j] <- labelgr2
partition[(j+1):N] <- labelgr3
partitions[[cpt]] <- partition
cpt <- cpt + 1
}
}
partitions
}
Partition2gr <- function(N)
{
Partitions <- list()
labelgr1 <- 1
labelgr2 <- 2
partition <- rep(labelgr2, N)
for(i in 1:(N-1))
{
temp <- partition
temp[1:i] <- labelgr1
Partitions[[i]] <- temp
}
Partitions
}
AnalyseBTTF2 <- BTTF2(LivingCells, Log=TRUE, minleaf = 50, ct = 0.1,
subpartind = CD3CD4amongLive, Knodes = 2)
Annot<- function(LeafCenter, labels, main, data, ct, plot)
{
p <- ncol(LeafCenter)
n <- nrow(LeafCenter)
leaves <- LeafCenter[,p]
len_lab <- length(labels)
cnames <- colnames(LeafCenter[,1:(p-1)])
out <- matrix(NA,ncol = (p-1), nrow = len_lab)
if(n == 2)
{
for(j in 1:(p-1))
{
temp_ <- sort(LeafCenter[,j], index.return = TRUE)
temp <- temp_$x
leavesSort <- leaves[temp_$ix]
D <- c()
for (i in 1:(n-1))
{
D <- append(D, abs(temp[i] - temp[i+1]))
}
sortD <- sort(D, decreasing = TRUE, index.return = TRUE)
maxD <- sortD$ix[1]
tempclass_neg <- leavesSort[1:(maxD)]
tempclass_pos <- leavesSort[(maxD+1) : n]
out[which(labels %in% tempclass_neg), j] <- 0
out[which(labels %in% tempclass_pos), j] <- 1
plot(temp, rep(1,n), xaxt="n", yaxt="n", ylab="", xlab=cnames[j],main=main,
col = c(rep(2,length(tempclass_neg)), rep(3, length(tempclass_pos))), pch=16)
axis(1, at=temp, labels=leavesSort, cex.axis = 0.7)
}
colnames(out) <- cnames
return(out)
}
else if(n > 2)
{
for(j in 1:(p-1))
{
temp_ <- sort(LeafCenter[,j], index.return = TRUE)
temp <- temp_$x
leavesSort <- leaves[temp_$ix]
D <- c()
for (i in 1:(n-1))
{
D <- append(D, abs(temp[i] - temp[i+1]))
}
sortD <- sort(D, decreasing = TRUE, index.return = TRUE)
data_j <- data[,j]
mu.1 <- mean(data_j)
var.1 <- var(data_j)
Llike1 <- sum(mvnpdfC(data_j, mu.1,var.1, Log=TRUE))
df1 <- 2
Aic1 <- 2*df1 - 2*Llike1
leavesSort_ <- leavesSort
len_leaves <- length(temp)
partitions2gr <- Partition2gr(n)
intra2 <- KmeansOPT(partitions2gr, temp, K=2)
#       intra2 <- intra(partitions2gr, leavesSort, labels, data_j, K=2)
minintra2gr <- intra2$ind
valintra2 <- intra2$val
partwin2gr <- partitions2gr[[minintra2gr]]
tempclass_neg.2  <- leavesSort[which(partwin2gr == 1)]
tempclass_pos.2  <- leavesSort[which(partwin2gr == 2)]
gr1 <- tempclass_neg.2
gr2 <- tempclass_pos.2
labintempclass_neg.2 <- labels %in% tempclass_neg.2
labintempclass_pos.2 <- labels %in% tempclass_pos.2
tind1.2 <- which(labintempclass_neg.2)
tind2.2 <- which(labintempclass_pos.2)
data_ind1_j.2 <- data_j[tind1.2]
data_ind2_j.2 <- data_j[tind2.2]
mu1.2 <- mean(data_ind1_j.2)
mu2.2 <- mean(data_ind2_j.2)
Mu.2 <- c(mu1.2, mu2.2)
Var1.2 <- var(data_ind1_j.2)
Var2.2 <- var(data_ind2_j.2)
Sigma.2 <- c(Var1.2, Var2.2)
p1.2 <- sum(labintempclass_neg.2)/len_lab
p2.2 <- 1 - p1.2
Pi.2 <- c(p1.2, p2.2)
Llike2 <- sum(nmixpdfC(data_j, Mu.2, Sigma.2, Pi.2, Log=TRUE))
df2 <- 5
Aic2 <- 2*df2 - 2*Llike2
partitions3gr <- Partition3gr(n)
intra3 <- KmeansOPT(partitions3gr, temp, K=3)
#       intra3 <- intra(partitions3gr, leavesSort, labels, data_j, K=3)
minintra3gr <- intra3$ind
valintra3 <- intra3$val
partwin3gr <- partitions3gr[[minintra3gr]]
tempclass_neg.3  <- leavesSort[which(partwin3gr == 1)]
tempclass_pos.3  <- leavesSort[which(partwin3gr == 2)]
tempclass_dpos.3 <- leavesSort[which(partwin3gr == 3)]
gr1 <- tempclass_neg.3
gr2 <- tempclass_pos.3
gr3 <- tempclass_dpos.3
labintempclass_neg.3 <- labels %in% tempclass_neg.3
labintempclass_pos.3 <- labels %in% tempclass_pos.3
labintempclass_dpos.3 <- labels %in% tempclass_dpos.3
tind1.3 <- which(labintempclass_neg.3)
tind2.3 <- which(labintempclass_pos.3)
tind3.3 <- which(labintempclass_dpos.3)
data_ind1_j.3 <- data_j[tind1.3]
data_ind2_j.3 <- data_j[tind2.3]
data_ind3_j.3 <- data_j[tind3.3]
mu1.3 <- mean(data_ind1_j.3)
mu2.3 <- mean(data_ind2_j.3)
mu3.3 <- mean(data_ind3_j.3)
Mu.3 <- c(mu1.3, mu2.3, mu3.3)
Var1.3 <- var(data_ind1_j.3)
Var2.3 <- var(data_ind2_j.3)
Var3.3 <- var(data_ind3_j.3)
Sigma.3 <- c(Var1.3, Var2.3, Var3.3)
p1.3 <- sum(labintempclass_neg.3)/len_lab
p2.3 <- sum(labintempclass_pos.3)/len_lab
p3.3 <- 1-sum(p1.3,p2.3)
Pi.3 <- c(p1.3, p2.3, p3.3)
Llike3 <- sum(nmixpdfC(data_j, Mu.3, Sigma.3, Pi.3, Log=TRUE))
df3 <- 8
Aic3 <- 2*df3 - 2*Llike3
Llikevec <- c(Llike1, Llike2, Llike3)
AicDiff1 <- ((Aic1 - Aic2)/len_lab)
AicDiff2 <- ((Aic1 - Aic3)/len_lab)
#       Win <- c(2,3)[which.min(c(valintra2, valintra3))]
Win <- 3
AicDiff <- c(AicDiff1, AicDiff2)
tempWin <- which.max(AicDiff)
#       if(cnames[j] == "CD45" | cnames[j] == "CCR7")
if(cnames[j] == "CD20")
{
#         Win <- c(2,3)[which.min(c(Aic2, Aic3))]
Win <- c(2,3)[tempWin]
}
else
{
Win <- 2
}
#       if(AicDiff[tempWin] < ct)
#       {
#         #         Win <- 1
#         Win <- 2
#       }
#       else if(tempWin == 1)
#       {
#         Win <- 2
#       }
#       else if((abs(AicDiff1 -  AicDiff2) < 0.1))
#       {
#         if(AicDiff1 < ct)
#         {
#           #           Win <- 1
#           Win <- 2
#         }
#         else
#         {
#           Win <- 2
#         }
#       }
#       else
#       {
#         Win <- 3
#       }
if(Win == 1)
{
out[1:len_lab, j] <- NA
if(plot)
{
curve(dnorm(x, mu.1, sqrt(var.1)),
xlim=c(min(density(data[,j])$x),max(density(data[,j])$x)),
ylim=c(0,max(density(data[,j])$y)),
main = paste0(cnames[j]),
xlab = paste("N = ", length(data[,j]),", normAIC = ",
round(AicDiff1,2), sep =" "),ylab = "Density",
col = "blue", lwd=2)
lines(density(data[,j]), col='red', lwd = 2)
plot(temp, rep(1,n), yaxt="n", ylab="",main="classes",  #xaxt="n"
col = c(rep(2,n)),pch=16)
pos <- rep(1, n)
pos[!1:n%%2] <- 3
text(temp, rep(1,n), labels = leavesSort, cex = 0.45, pos=pos)
}
}
else if(Win == 2)
{
out[tind1.2, j] <- 0
out[tind2.2, j] <- 1
if(plot)
{
#           curve(GaussMix(x, mu1.2, mu2.2,
#                          sqrt(Var1.2), sqrt(Var2.2),
#                          p1.2, p2.2),
#                 xlim=c(min(density(data[,j])$x),max(density(data[,j])$x)),
#                 ylim=c(0,max(density(data[,j])$y)),
#                 main = paste0(cnames[j]),
#                 xlab = paste("N = ", length(data[,j]),", normAIC = ",
#                              round(AicDiff1,2), sep =" "),ylab = "Density",
#                 col = "blue", lwd=2)
#           lines(density(data[,j]), col='red', lwd = 2)
abl <- mean(c(temp[length(tempclass_neg.2)],
temp[(length(tempclass_neg.2) + 1)]))
plot(density(data[,j]), col='red', lwd = 2,
main = paste0(cnames[j]),
xlab = paste("N = ", length(data[,j]),", normAIC = ",
round(AicDiff1,2), sep =" "),ylab = "Density")
#           abline(v =  abl)
colo <- rep(2, length(leavesSort))
colo[leavesSort%in%tempclass_neg.2] <-4
plot(temp, rep(1,n), yaxt="n", ylab="", xlab="",main="classes",
col = colo,pch=16)
#           abline(v =  abl)
pos <- rep(1, n)
pos[!1:n%%2] <- 3
text(temp, rep(1,n), labels = leavesSort, cex = 0.45, pos=pos)
}
}
else if(Win == 3)
{
out[tind1.3, j] <- 0
out[tind2.3, j] <- 1
out[tind3.3, j] <- 2
if(plot)
{
curve(GaussMix3(x, mu1.3, mu2.3, mu3.3,
sqrt(Var1.3), sqrt(Var2.3), sqrt(Var3.3),
p1.3, p2.3, p3.3),
ylim=c(0,max(density(data[,j])$y)),
xlim=c(min(density(data[,j])$x),max(density(data[,j])$x)),
main = paste0(cnames[j]),
xlab = paste("N = ", length(data[,j]),", normAIC = ",
round(AicDiff2,2), sep =" "),ylab = "Density",
col = "blue", lwd=2)
lines(density(data[,j]), col='red', lwd = 2)
colo <- rep(4, length(leavesSort))
colo[leavesSort%in%gr1] <-2
colo[leavesSort%in%gr2] <-3
plot(temp, rep(1,n), yaxt="n", ylab="", xlab="",main="classes",
col = colo,pch=16)
pos <- rep(1, n)
pos[!1:n%%2] <- 3
text(temp, rep(1,n), labels = leavesSort, cex = 0.45, pos=pos)
}
}
}
}
colnames(out) <- cnames
return(out)
}
AnalyseBTTF2 <- BTTF2(LivingCells, Log=TRUE, minleaf = 50, ct = 0.1,
subpartind = CD3CD4amongLive, Knodes = 2)
library(Cytometree)
library(Cytometree)
library(Cytometree)
library(Cytometree)
library(Cytometree)
library(Cytometree)
library(Cytometree)
head(TcellsStandford)
data(TcellsStandford)
data("TcellsStandford.Rdata")
data("TcellsStanford.Rdata")
TcellsStanford
data(TcellsStanford)
library(Cytometree)
data("TcellsStanford")
devtools::create()
library(Cytometree)
data("TcellsStanford")
TcellsStanford
library(Cytometree)
TcellsStanford
library(Cytometree)
library(Cytometree)
TcellsStanford
data(TcellsStanford)
library(Cytometree)
library(Cytometree)
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR()
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR()
R.version
library(Cytometree)
library(Cytometree)
a = get(load("sample.Rdata"))
dim(a)
