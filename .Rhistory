{
mark_tree[[level]][[i]] <- NA
}
if(stopping_flag==n_nodes_at_level)
{
Tree <- list("tree"=tree,"mark_tree"=mark_tree, "M" = M,
"combinations"=combinations,"labels"=labels,
"pl_list"= pl_list, "Signtree" = Signtree)
class(Tree) <- "CytomeTree"
return(Tree)
}
}
else
{
label_graph <- label_graph + 1
ind <- mark_left[CytEMRes$ind[1]]
mark_tree[[level]][[i]] <- paste0(col_names[ind],".",label_graph)
temp_mar_res <- c(CytEMRes$ind[-c(1)],
CytEMRes$mark_not_dis)
mark_left <- mark_left[temp_mar_res]
flag_mark_left <- length(mark_left)
flag_child <- 1
L_child <- CytEMRes$child$G
R_child <- CytEMRes$child$D
combinations[L_child,ind] <- 0
combinations[R_child,ind] <- 1
KDE <- density(M[temp_node,ind], n = len_data_plot)
GMM <- list()
GMM$x <- KDE$x
GMM$y <-   GaussMix(GMM$x, CytEMRes$mu1, CytEMRes$mu2,
sqrt(CytEMRes$Var1), sqrt(CytEMRes$Var2),
CytEMRes$pi1, CytEMRes$pi2)
pl_list[[1]][[label_graph]] <- KDE
pl_list[[2]][[label_graph]] <- paste0(col_names[ind],".",label_graph)
pl_list[[3]][[label_graph]] <- GMM
pl_list[[4]][[label_graph]] <- paste("n =", length(temp_node),"nAIC =",
round(CytEMRes$nAIC[1],2), sep =" ")
}
}
}
if(flag_child)
{
temp_list_lc <- temp_list_rc <- list()
temp_list_lc[[1]] <- L_child
temp_list_rc[[1]] <- R_child
tree[[c_level]][node_counter] <- temp_list_lc
tree[[c_level]][node_counter + 1] <- temp_list_rc
temp_list_lc_sign <- temp_list_rc_sign <- list()
temp_list_lc_sign[[1]] <- "-"
temp_list_rc_sign[[1]] <- "+"
Signtree[[c_level]][node_counter] <- temp_list_lc_sign
Signtree[[c_level]][node_counter + 1] <- temp_list_rc_sign
if(level == 1)
{
vecMar <- append(vecMar, col_names[root_ind])
}
else
{
vecMar <- append(vecMar, col_names[ind])
}
vecMarNode <- append(vecMarNode, pl_list[[2]][[label_graph]])
if(flag_mark_left)
{
marks_left[[c_level]][[node_counter]] <- mark_left
marks_left[[c_level]][[node_counter + 1]] <- mark_left
}
else
{
marks_left[[c_level]][[node_counter]] <- numeric()
marks_left[[c_level]][[node_counter + 1]] <- numeric()
}
node_counter <- node_counter + 2
}
else
{
temp_list_lc <- temp_list_rc <- list()
temp_list_lc[[1]] <- temp_list_rc[[1]] <- NA
tree[[c_level]][node_counter] <- temp_list_lc
tree[[c_level]][node_counter + 1] <- temp_list_rc
temp_list_lc_sign <- temp_list_rc_sign <- list()
temp_list_lc_sign[[1]] <-  temp_list_rc_sign[[1]] <- NA
Signtree[[c_level]][node_counter] <- temp_list_lc_sign[[1]]
Signtree[[c_level]][node_counter + 1] <- temp_list_rc_sign[[1]]
marks_left[[c_level]][[node_counter]] <- numeric()
marks_left[[c_level]][[node_counter + 1]] <- numeric()
node_counter <- node_counter + 2
}
}
level <- c_level
mark_tree[[c_level]] <- list()
}
}
ann <- Annotation(res, K3markers = NULL, plot = TRUE)
res <- CytomeTree(sample,minleaf = MinLeaf, D = 0.2)
ann <- Annotation(res, K3markers = NULL, plot = TRUE)
plot_graph(res,
vertex.size = 0,
edge.arrow.size=.1)
colnames(res$M)
plot_nodes(res)
setwd("~/GvHD")
# ech = iter
n <- 12
F_GVHD <-  c()
n_cells <- 0
for (iter in 1:n){
sample <- read.csv(paste("0",as.character(iter),".csv",sep=""))[,-c(1,2)]
label <- read.csv(paste("_0",as.character(iter),".csv",sep=""))[,1]
colnames(sample) <- NULL
MinLeaf <- floor(length(label) * 0.0)
print(norm(as.matrix(sample), "F"))
res <- CytomeTree(sample,minleaf = MinLeaf, D = 0.2)
Partition <- res$labels
F_GVHD <- append(F_GVHD,FmeasureC_no0(ref=label, pred=Partition))
cat(iter,"\n")
}
var(sample)
cov(sample)
ann <- Annotation(res, K3markers = NULL, plot = TRUE)
plot_graph(res,
vertex.size = 0,
edge.arrow.size=.1)
plot_nodes(res)
mean(F_GVHD)
setwd("~/GvHD")
# ech = iter
n <- 12
F_GVHD <-  c()
n_cells <- 0
for (iter in 1:n){
sample <- read.csv(paste("0",as.character(iter),".csv",sep=""))[,-c(1,2)]
label <- read.csv(paste("_0",as.character(iter),".csv",sep=""))[,1]
colnames(sample) <- NULL
MinLeaf <- floor(length(label) * 0.0)
print(norm(var(as.matrix(sample)), "F"))
res <- CytomeTree(sample,minleaf = MinLeaf, D = 0.2)
ann <- Annotation(res, K3markers = NULL, plot = TRUE)
plot_graph(res,
vertex.size = 0,
edge.arrow.size=.1)
plot_nodes(res)
Partition <- res$labels
F_GVHD <- append(F_GVHD,FmeasureC_no0(ref=label, pred=Partition))
cat(iter,"\n")
}
F_GVHD
Annotation<- function(CytomeTreeObj, K3markers, plot)
{
if(class(CytomeTreeObj) != "CytomeTree")
{
stop("CytomeTreeObj must be of class CytomeTree")
}
if(!is.null(K3markers))
{
if(class(K3markers)!="character")
{
stop("K3markers must be of class character")
}
}
M <- CytomeTreeObj$M
labels <- CytomeTreeObj$labels
lc <- LeafCenters(CytomeTreeObj)
len_lab <- length(labels)
dlc <- dim(lc)
n <- dlc[1]
p <- dlc[2]
leaves <- lc[,p]
cnames <- colnames(lc[,1:(p-1)])
combinations <- cbind(matrix(0, ncol = (p-1), nrow = n), 1:n)
if(n == 1)
{
stop()
}
else
{
for(j in 1:(p-1))
{
ExpressLevels <- 2
if(any(cnames[j] == K3markers))
{
ExpressLevels <- 3
}
leavesSort <- leaves[sort(lc[,j], index.return = TRUE)$ix]
M_j <- M[,j]
leavesSort_ <- leavesSort
partitions2gr <- Partition2gr(n)
Kmeans2 <- KmeansOPT(partitions2gr, leavesSort, labels, M_j, K = 2)
partwin2gr <- partitions2gr[[Kmeans2$ind]]
tempclass_neg.2  <- leavesSort[which(partwin2gr == 1)]
tempclass_pos.2  <- leavesSort[which(partwin2gr == 2)]
tind1.2 <- which(labels%in%tempclass_neg.2)
tind2.2 <- which(labels%in%tempclass_pos.2)
partitions3gr <- Partition3gr(n)
Kmeans3 <- KmeansOPT(partitions3gr, leavesSort, labels, M_j, K = 3)
partwin3gr <- partitions3gr[[which.max(Kmeans3$ind)]]
tempclass_neg.3  <- leavesSort[which(partwin3gr == 1)]
tempclass_pos.3  <- leavesSort[which(partwin3gr == 2)]
tempclass_dpos.3 <- leavesSort[which(partwin3gr == 3)]
tind1.3 <- which(labels%in%tempclass_neg.3)
tind2.3 <- which(labels%in%tempclass_pos.3)
tind3.3 <- which(labels%in%tempclass_dpos.3)
if(ExpressLevels == 2)
{
combinations[tempclass_pos.2, j] <- 1
if(plot)
{
Expression <- rep(1, len_lab)
Expression[labels%in%tempclass_neg.2] <- 2
dfbox <- data.frame(Leaves = factor(labels, levels =
as.character(leavesSort)),
Fluorescence = M[,j],
Expression = as.factor(Expression))
p <- ggplot(dfbox, aes(Leaves,
Fluorescence,
fill = Expression ))
suppressWarnings(print(p + ggtitle(cnames[j]) +
geom_boxplot(outlier.shape = NA, alpha = 1/3)+
scale_fill_manual(values = c("red","blue"),
name = "Annotation",
labels = c("Hi","Low"))))
}
}
else if(ExpressLevels == 3)
{
combinations[tempclass_pos.3, j] <- 1
combinations[tempclass_dpos.3, j] <- 2
if(plot)
{
Expression <- rep(1, len_lab)
Expression[labels%in%tempclass_pos.3] <- 2
Expression[labels%in%tempclass_dpos.3] <- 3
dfbox <- data.frame(Leaves = factor(labels, levels =
as.character(leavesSort)),
Fluorescence = M[,j],
Expression = as.factor(Expression))
p <- ggplot(dfbox, aes(Leaves,
Fluorescence,
fill = Expression ))
suppressWarnings(print(p + ggtitle(cnames[j]) +
geom_boxplot(outlier.shape = NA,
alpha = 1/3)+
scale_fill_manual(values =
c("blue","green","red"),
name = "Annotation",
labels =
c("Low","Hi","Hi+"))))
}
}
}
}
tblabels <- table(labels)
combinations <- cbind(combinations, table(labels), round(tblabels/len_lab,4))
colnames(combinations) <- c(cnames, "leaves", "count", "prop")
as.data.frame(combinations)
}
Annotation<- function(CytomeTreeObj, K3markers, plot)
{
if(class(CytomeTreeObj) != "CytomeTree")
{
stop("CytomeTreeObj must be of class CytomeTree")
}
if(!is.null(K3markers))
{
if(class(K3markers)!="character")
{
stop("K3markers must be of class character")
}
}
M <- CytomeTreeObj$M
labels <- CytomeTreeObj$labels
lc <- LeafCenters(CytomeTreeObj)
len_lab <- length(labels)
dlc <- dim(lc)
n <- dlc[1]
p <- dlc[2]
leaves <- lc[,p]
cnames <- colnames(lc[,1:(p-1)])
combinations <- cbind(matrix(0, ncol = (p-1), nrow = n), 1:n)
if(n == 1)
{
stop()
}
else
{
for(j in 1:(p-1))
{
ExpressLevels <- 2
if(any(cnames[j] == K3markers))
{
ExpressLevels <- 3
}
leavesSort <- leaves[sort(lc[,j], index.return = TRUE)$ix]
M_j <- M[,j]
leavesSort_ <- leavesSort
partitions2gr <- Partition2gr(n)
Kmeans2 <- KmeansOPT(partitions2gr, leavesSort, labels, M_j, K = 2)
partwin2gr <- partitions2gr[[Kmeans2$ind]]
tempclass_neg.2  <- leavesSort[which(partwin2gr == 1)]
tempclass_pos.2  <- leavesSort[which(partwin2gr == 2)]
tind1.2 <- which(labels%in%tempclass_neg.2)
tind2.2 <- which(labels%in%tempclass_pos.2)
partitions3gr <- Partition3gr(n)
Kmeans3 <- KmeansOPT(partitions3gr, leavesSort, labels, M_j, K = 3)
partwin3gr <- partitions3gr[[which.max(Kmeans3$ind)]]
tempclass_neg.3  <- leavesSort[which(partwin3gr == 1)]
tempclass_pos.3  <- leavesSort[which(partwin3gr == 2)]
tempclass_dpos.3 <- leavesSort[which(partwin3gr == 3)]
tind1.3 <- which(labels%in%tempclass_neg.3)
tind2.3 <- which(labels%in%tempclass_pos.3)
tind3.3 <- which(labels%in%tempclass_dpos.3)
if(ExpressLevels == 2)
{
combinations[tempclass_pos.2, j] <- 1
if(plot)
{
Expression <- rep(1, len_lab)
Expression[labels%in%tempclass_neg.2] <- 2
dfbox <- data.frame(Leaves = factor(labels, levels =
as.character(leavesSort)),
Fluorescence = M[,j],
Expression = as.factor(Expression))
p <- ggplot(dfbox, aes(Leaves,
Fluorescence,
fill = Expression ))
suppressWarnings(print(p + ggtitle(cnames[j]) +
geom_boxplot(outlier.shape = NA, alpha = 1/3)+
scale_fill_manual(values = c("red","blue"),
name = "Annotation",
labels = c("Hi","Low"))))
}
}
else if(ExpressLevels == 3)
{
combinations[tempclass_pos.3, j] <- 1
combinations[tempclass_dpos.3, j] <- 2
if(plot)
{
Expression <- rep(1, len_lab)
Expression[labels%in%tempclass_pos.3] <- 2
Expression[labels%in%tempclass_dpos.3] <- 3
dfbox <- data.frame(Leaves = factor(labels, levels =
as.character(leavesSort)),
Fluorescence = M[,j],
Expression = as.factor(Expression))
p <- ggplot(dfbox, aes(Leaves,
Fluorescence,
fill = Expression ))
suppressWarnings(print(p + ggtitle(cnames[j]) +
geom_boxplot(outlier.shape = NA,
alpha = 1/3)+
scale_fill_manual(values =
c("blue","green","red"),
name = "Annotation",
labels =
c("Low","Hi","Hi+"))))
}
}
}
}
tblabels <- table(labels)
combinations <- cbind(combinations, table(labels), round(tblabels/len_lab,4))
colnames(combinations) <- c(cnames, "leaves", "count", "prop")
as.data.frame(combinations)
}
setwd("~/GvHD")
# ech = iter
n <- 12
F_GVHD <-  c()
n_cells <- 0
for (iter in 1:n){
sample <- read.csv(paste("0",as.character(iter),".csv",sep=""))[,-c(1,2)]
label <- read.csv(paste("_0",as.character(iter),".csv",sep=""))[,1]
colnames(sample) <- NULL
MinLeaf <- floor(length(label) * 0.0)
print(norm(var(as.matrix(sample)), "F"))
res <- CytomeTree(sample,minleaf = MinLeaf, D = 0.2)
Partition <- res$labels
F_GVHD <- append(F_GVHD,FmeasureC_no0(ref=label, pred=Partition))
cat(iter,"\n")
}
setwd("~/GvHD")
# ech = iter
n <- 12
F_GVHD <-  c()
n_cells <- 0
for (iter in 1:n){
sample <- read.csv(paste("0",as.character(iter),".csv",sep=""))[,-c(1,2)]
label <- read.csv(paste("_0",as.character(iter),".csv",sep=""))[,1]
colnames(sample) <- NULL
MinLeaf <- floor(length(label) * 0.0)
res <- CytomeTree(sample,minleaf = MinLeaf, D = 0.2)
Partition <- res$labels
F_GVHD <- append(F_GVHD,FmeasureC_no0(ref=label, pred=Partition))
cat(iter,"\n")
}
mean(F_GVHD)
ann <- Annotation(res, K3markers = NULL, plot = TRUE)
plot_graph(res,
vertex.size = 0,
edge.arrow.size=.1)
plot_nodes(res)
?roxygenize
library(roxygen2)
install.packages(roxygen2)
install.packages('roxygen2')
library(roxygen2)
?roxygenize
roxygenize()
library(cytometree)
library(cytometree)
library(cytometree)
?Mclust
library(cytometree)
rm(list=ls())
library(cytometree)
library(cytometree)
library(cytometree)
library(cytometree)
test <- CytomeTree(sample6[,-c(which(colnames(sample6)=="CD3"))])
init_cpp <- function(name, path){
file <- file.path("src", "init.cpp")
if (!missing(path))
file <- file.path(path, file)
cat(
"// Generated by the rstantools package\n\n",
"#include <R.h>",
"#include <Rinternals.h>",
"#include <R_ext/Rdynload.h>",
"#include <R_ext/Visibility.h>",
"#include <Rversion.h>",
sep = "\n",
file = file,
append = FALSE
)
cat(
"\n\nstatic const R_CallMethodDef CallEntries[] = {",
"  {NULL, NULL, 0}",
"};",
sep = "\n",
file = file,
append = TRUE
)
cat(
paste0("\n\nvoid attribute_visible R_init_", name, "(DllInfo *dll) {"),
"  // next line is necessary to avoid a NOTE from R CMD check",
"  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);",
"  R_useDynamicSymbols(dll, TRUE); // necessary for .onLoad() to work",
"}",
sep = "\n",
file = file,
append = TRUE
)
}
init_cpp('init')
library(cytometree)
library(cytometree)
library(cytometree)
library(cytometree)
library(cytometree)
library(cytometree)
library(cytometree)
library(cytometree)
library(cytometree)
load("W2.Rdata")
sample6 <- get(paste('W2_',iter,sep=""))
iter = 1
sample6 <- get(paste('W2_',iter,sep=""))
test <- CytomeTree(sample6[,-c(which(colnames(sample6)=="CD3"))])
plot_nodes(test)
plot_graph(test,edge.arrow.size=.1)
Annotation(test)
dim(sample6)
dim(sample6)
dim(sample6)[1]*.001
dim(sample6)[1]*.01
dim(sample6)[1]*.001
dim(sample6)[1]
iter = 6
sample6 <- get(paste('W2_',iter,sep=""))
dim(sample6)[1]
dim(sample6)[1]*.001
test <- CytomeTree(sample6[,-c(which(colnames(sample6)=="CD3"))],
minleaf = dim(sample6)[1]*.001)
plot_nodes(test)
plot_graph(test,edge.arrow.size=.1)
test <- CytomeTree(sample6[,-c(which(colnames(sample6)=="CD3"))],
minleaf = dim(sample6)[1]*.005)
plot_nodes(test)
plot_graph(test,edge.arrow.size=.1)
dim(sample6)[1]*.005
Annotation(test)
test <- CytomeTree(sample6[,-c(which(colnames(sample6)=="CD3"))],
minleaf = dim(sample6)[1]*.009)
plot_nodes(test)
plot_graph(test,edge.arrow.size=.1)
Annotation(test)
iter = 4
sample6 <- get(paste('W2_',iter,sep=""))
dim(sample6)[1]
test <- CytomeTree(sample6[,-c(which(colnames(sample6)=="CD3"))],
minleaf = dim(sample6)[1]*.005)
plot_nodes(test)
plot_graph(test,edge.arrow.size=.1)
iter = 6
sample6 <- get(paste('W2_',iter,sep=""))
plot_nodes(test)
par(mfrow=c(4,3))
plot_nodes(test)
plot_nodes(test)
par(mfrow=c(3,3))
plot_nodes(test)
rm(list =ls())
