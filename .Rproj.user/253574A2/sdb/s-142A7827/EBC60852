{
    "contents" : "#' TODO\n#'@param \n#'\n#'@author Chariff Alkhassim\n#'\n#'@export \n# \n\n\nAnnotation<- function(CytomeTreeObj, K3markers, plot)\n{\n  if(class(CytomeTreeObj) != \"CytomeTree\")\n  {\n    stop(\"CytomeTreeObj must be of class CytomeTree\")\n  }\n  if(!is.null(K3markers))\n  {\n    if(class(K3markers)!=\"character\")\n    {\n      stop(\"K3markers must be of class character\")\n    }\n  } \n  M <- CytomeTreeObj$M\n  labels <- CytomeTreeObj$labels\n  lc <- LeafCenters(CytomeTreeObj, M)\n  len_lab <- length(labels)\n  dlc <- dim(lc)\n  n <- dlc[1]\n  p <- dlc[2]\n  leaves <- lc[,p]\n  cnames <- colnames(lc[,1:(p-1)])\n  combinations <- cbind(matrix(0, ncol = (p-1), nrow = n), 1:n)\n  if(n == 1) \n  {\n    stop(\"CytomeTree didn't find any population\")\n  }\n  else \n  {\n    for(j in 1:(p-1))\n    {\n      ExpressLevels <- 2\n      if(any(cnames[j] == K3markers))\n      {\n        ExpressLevels <- 3\n      }\n      leavesSort <- leaves[sort(lc[,j], index.return = TRUE)$ix]\n      M_j <- M[,j]\n      leavesSort_ <- leavesSort\n      partitions2gr <- Partition2gr(n)\n      Kmeans2 <- KmeansOPT(partitions2gr, leavesSort, labels, M_j, K = 2)\n      partwin2gr <- partitions2gr[[Kmeans2$ind]]\n      tempclass_neg.2  <- leavesSort[which(partwin2gr == 1)]\n      tempclass_pos.2  <- leavesSort[which(partwin2gr == 2)]\n      tind1.2 <- which(labels%in%tempclass_neg.2)\n      tind2.2 <- which(labels%in%tempclass_pos.2)\n      partitions3gr <- Partition3gr(n)\n      Kmeans3 <- KmeansOPT(partitions3gr, leavesSort, labels, M_j, K = 3)\n      partwin3gr <- partitions3gr[[which.max(Kmeans3$ind)]]\n      tempclass_neg.3  <- leavesSort[which(partwin3gr == 1)]\n      tempclass_pos.3  <- leavesSort[which(partwin3gr == 2)]\n      tempclass_dpos.3 <- leavesSort[which(partwin3gr == 3)]\n      tind1.3 <- which(labels%in%tempclass_neg.3)\n      tind2.3 <- which(labels%in%tempclass_pos.3)\n      tind3.3 <- which(labels%in%tempclass_dpos.3)\n      if(ExpressLevels == 2)\n      {   \n        combinations[tempclass_pos.2, j] <- 1\n        if(plot)\n        {\n          Expression <- rep(1, len_lab)\n          Expression[labels%in%tempclass_neg.2] <- 2      \n          dfbox <- data.frame(Leaves = factor(labels, levels = \n                                                as.character(leavesSort)), \n                              Fluorescence = M[,j], \n                              Expression = as.factor(Expression))\n          p <- ggplot(dfbox, aes(Leaves, \n                                 Fluorescence, \n                                 fill = Expression ))\n          suppressWarnings(print(p + ggtitle(cnames[j]) + \n                                   geom_boxplot(outlier.shape = NA, alpha = 1/3)+\n                                   scale_fill_manual(values = c(\"red\",\"blue\"),\n                                                     name = \"Annotation\",\n                                                     labels = c(\"Hi\",\"Low\"))))\n        }\n      }\n      else if(ExpressLevels == 3)\n      {\n        combinations[tempclass_pos.3, j] <- 1\n        combinations[tempclass_dpos.3, j] <- 2\n        if(plot)\n        {        \n          Expression <- rep(1, len_lab)\n          Expression[labels%in%tempclass_pos.3] <- 2\n          Expression[labels%in%tempclass_dpos.3] <- 3\n          \n          \n          dfbox <- data.frame(Leaves = factor(labels, levels = \n                                                as.character(leavesSort)), \n                              Fluorescence = M[,j], \n                              Expression = as.factor(Expression))\n          p <- ggplot(dfbox, aes(Leaves, \n                                 Fluorescence, \n                                 fill = Expression ))\n          suppressWarnings(print(p + ggtitle(cnames[j]) + \n                                   geom_boxplot(outlier.shape = NA, \n                                                alpha = 1/3)+\n                                   scale_fill_manual(values = \n                                                       c(\"blue\",\"green\",\"red\"),\n                                                     name = \"Annotation\",\n                                                     labels = \n                                                       c(\"Low\",\"Hi\",\"Hi+\"))))\n        }\n      }\n    } \n  }\n  \n  tblabels <- table(labels)\n  combinations <- cbind(combinations, table(labels), round(tblabels/len_lab,4))\n  colnames(combinations) <- c(cnames, \"leaves\", \"count\", \"prop\")\n  as.data.frame(combinations)\n}\n\n\n\n\n",
    "created" : 1493972825764.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3382800289",
    "id" : "EBC60852",
    "lastKnownWriteTime" : 1493973658,
    "path" : "P:/Git/Cytometree/R/Annotation.R",
    "project_path" : "R/Annotation.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}