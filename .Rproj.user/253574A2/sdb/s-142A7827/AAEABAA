{
    "contents" : "\n#'@param \n#'\n#'@author Chariff Alkhassim\n#'\n#'@export \n# \nCytomeTree <- function(M, minleaf, D)\n{\n  if((class(M) != \"matrix\") & (class(M) != \"data.frame\"))\n  {\n    stop(\"M should be of class matrix or data.frame\")\n  }\n  n <- nrow(M)\n  if(minleaf >= n)\n  {\n    stop(\"minleaf is superior to n\")\n  }\n  p <- ncol(M)\n  if(p > n){\n    stop(\"p is superior to n\")\n  }\n  if(any(is.na(M)))\n  {\n    stop(\"M contains NAs\")\n  }\n  combinations <- matrix(NA, n, p)   \n  col_names <- colnames(M)\n  if(is.null(col_names))\n  {\n    colnames(M) <- paste0(rep(\"M\",p), 1:p)\n  }\n  colnames(combinations) <- col_names\n  root <- tree <- Signtree <- mark_tree <- marks_left <- rootmarks <- list()\n  labels <- rep(0, n)\n  label_counter <- label_graph <- level <- 1\n  CytEMRes <- CytEM(M, 1:n, minleaf, level, D)\n  if(is.null(CytEMRes$ind))\n  {\n    Tree <- list(\"labels\"= rep(1, n), \"Signtree\" = Signtree, \"M\" = M)\n    class(Tree) <- \"CytomeTree\"\n    return(Tree)\n  }\n  root_ind <- CytEMRes$ind[1]\n  mark_left <- c(CytEMRes$ind[-c(1)], CytEMRes$mark_not_dis)\n  root[[level]] <- M[,root_ind] \n  tree[[level]] <- root\n  Signtree[[level]] <- \"root\"\n  mark_tree[[level]] <- paste0(col_names[root_ind],\".\",label_graph)\n  rootmarks[[level]] <- mark_left\n  marks_left[[level]] <- rootmarks \n  len_data_plot <- 512\n  pl_list <- list()\n  KDE <- density(M[,root_ind], n = len_data_plot)\n  GMM <- list()\n  GMM$x <- KDE$x\n  GMM$y <-   GaussMix(GMM$x, CytEMRes$mu1, CytEMRes$mu2, \n                      sqrt(CytEMRes$Var1), sqrt(CytEMRes$Var2),\n                      CytEMRes$pi1, CytEMRes$pi2)\n  pl_list[[1]] <-  pl_list[[2]]<- pl_list[[3]] <- pl_list[[4]] <- list()\n  pl_list[[1]][[label_graph]] <- KDE\n  pl_list[[2]][[label_graph]] <- paste0(col_names[root_ind],\".\",label_graph)\n  pl_list[[3]][[label_graph]] <- GMM\n  pl_list[[4]][[label_graph]] <- paste(\"n =\", n,\"nAIC =\",\n                                       round(CytEMRes$nAIC[1],2), sep =\" \")\n  cste1maxlevel <- log(n + 1)\n  cste2maxlevel <- log(2)\n  while(cste1maxlevel >= (level + 1) *  cste2maxlevel)\n  {\n    c_level <- level + 1\n    tree[[c_level]] <- Signtree[[c_level]] <- marks_left[[c_level]] <- list()\n    n_nodes_at_level <- length(tree[[level]])\n    stopping_flag <- 0\n    node_counter <- 1\n    for (i in 1:n_nodes_at_level)\n    {\n      flag_pop <- flag_child <- 0\n      temp_node <- tree[[level]][[i]]\n      mark_left <- marks_left[[level]][[i]]\n      flag_mark_left <- length(mark_left)\n      if(level==1)\n      {\n        flag_child <- 1\n        L_child <- CytEMRes$child$G\n        R_child <- CytEMRes$child$D\n        combinations[L_child,root_ind] <- 0\n        combinations[R_child,root_ind] <- 1 \n      }\n      else\n      {\n        if(!length(mark_left))\n        {\n          stopping_flag <- stopping_flag + 1\n          if(!is.na(temp_node[1]) & length(temp_node)){\n            flag_pop <- 1\n            labels[temp_node] <- label_counter\n          }\n          if(flag_pop)\n          {\n            mark_tree[[level]][[i]] <- as.character(label_counter) \n            label_counter <- label_counter + 1\n          }\n          else\n          {\n            mark_tree[[level]][[i]] <- NA   \n          }\n          if(stopping_flag == n_nodes_at_level)\n          {  \n            Tree <- list(\"tree\"=tree,\"mark_tree\"=mark_tree, \"M\" = M,\n                         \"combinations\"=combinations,\"labels\"=labels,\n                         \"pl_list\"= pl_list, \"Signtree\" = Signtree)\n            class(Tree) <- \"CytomeTree\"\n            return(Tree)\n          }\n        }\n        else\n        {\n          CytEMRes <- CytEM(M[temp_node,mark_left], temp_node, \n                            minleaf, level, D)\n          \n          if(is.null(CytEMRes$ind))\n          {\n            stopping_flag <- stopping_flag + 1\n            flag_pop <- 1\n            labels[temp_node] <- label_counter\n            if(flag_pop)\n            {\n              mark_tree[[level]][[i]] <- as.character(label_counter) \n              label_counter <- label_counter + 1\n            }\n            else\n            {\n              mark_tree[[level]][[i]] <- NA   \n            }\n            if(stopping_flag==n_nodes_at_level)\n            {   \n              Tree <- list(\"tree\"=tree,\"mark_tree\"=mark_tree, \"M\" = M,\n                           \"combinations\"=combinations,\"labels\"=labels,\n                           \"pl_list\"= pl_list, \"Signtree\" = Signtree)\n              class(Tree) <- \"CytomeTree\"\n              return(Tree)\n            }\n          }\n          else\n          {\n            label_graph <- label_graph + 1\n            ind <- mark_left[CytEMRes$ind[1]]\n            mark_tree[[level]][[i]] <- paste0(col_names[ind],\".\",label_graph)\n            temp_mar_res <- c(CytEMRes$ind[-c(1)],\n                              CytEMRes$mark_not_dis)\n            mark_left <- mark_left[temp_mar_res]\n            flag_mark_left <- length(mark_left)\n            flag_child <- 1\n            L_child <- CytEMRes$child$G\n            R_child <- CytEMRes$child$D\n            combinations[L_child,ind] <- 0\n            combinations[R_child,ind] <- 1\n            KDE <- density(M[temp_node,ind], n = len_data_plot)\n            GMM <- list()\n            GMM$x <- KDE$x\n            GMM$y <-   GaussMix(GMM$x, CytEMRes$mu1, CytEMRes$mu2, \n                                sqrt(CytEMRes$Var1), sqrt(CytEMRes$Var2),\n                                CytEMRes$pi1, CytEMRes$pi2)\n            pl_list[[1]][[label_graph]] <- KDE\n            pl_list[[2]][[label_graph]] <- paste0(col_names[ind],\".\",label_graph)\n            pl_list[[3]][[label_graph]] <- GMM\n            pl_list[[4]][[label_graph]] <- paste(\"n =\", length(temp_node),\"nAIC =\",\n                                                 round(CytEMRes$nAIC[1],2), sep =\" \")\n          } \n        }\n      }\n      if(flag_child)\n      { \n        temp_list_lc <- temp_list_rc <- list()        \n        temp_list_lc[[1]] <- L_child\n        temp_list_rc[[1]] <- R_child \n        tree[[c_level]][node_counter] <- temp_list_lc\n        tree[[c_level]][node_counter + 1] <- temp_list_rc\n        temp_list_lc_sign <- temp_list_rc_sign <- list()\n        temp_list_lc_sign[[1]] <- \"-\"\n        temp_list_rc_sign[[1]] <- \"+\"\n        Signtree[[c_level]][node_counter] <- temp_list_lc_sign\n        Signtree[[c_level]][node_counter + 1] <- temp_list_rc_sign\n        if(level == 1)\n        {\n          vecMar <- append(vecMar, col_names[root_ind])\n        }\n        else\n        {\n          vecMar <- append(vecMar, col_names[ind])\n        }\n        vecMarNode <- append(vecMarNode, pl_list[[2]][[label_graph]])\n        if(flag_mark_left)\n        {\n          marks_left[[c_level]][[node_counter]] <- mark_left\n          marks_left[[c_level]][[node_counter + 1]] <- mark_left\n        }\n        else\n        { \n          marks_left[[c_level]][[node_counter]] <- numeric()\n          marks_left[[c_level]][[node_counter + 1]] <- numeric()\n        }\n        node_counter <- node_counter + 2\n      }\n      else\n      {\n        temp_list_lc <- temp_list_rc <- list()\n        temp_list_lc[[1]] <- temp_list_rc[[1]] <- NA\n        tree[[c_level]][node_counter] <- temp_list_lc\n        tree[[c_level]][node_counter + 1] <- temp_list_rc\n        temp_list_lc_sign <- temp_list_rc_sign <- list()\n        temp_list_lc_sign[[1]] <-  temp_list_rc_sign[[1]] <- NA\n        Signtree[[c_level]][node_counter] <- temp_list_lc_sign[[1]]\n        Signtree[[c_level]][node_counter + 1] <- temp_list_rc_sign[[1]]\n        marks_left[[c_level]][[node_counter]] <- numeric()\n        marks_left[[c_level]][[node_counter + 1]] <- numeric()\n        node_counter <- node_counter + 2\n      }\n    }\n    level <- c_level\n    mark_tree[[c_level]] <- list()\n  }\n}\n\n\n",
    "created" : 1493972820987.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2393665041",
    "id" : "AAEABAA",
    "lastKnownWriteTime" : 1493977231,
    "path" : "P:/Git/Cytometree/R/CytomeTree.R",
    "project_path" : "R/CytomeTree.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}